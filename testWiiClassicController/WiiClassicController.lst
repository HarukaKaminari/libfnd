C51 COMPILER V9.52.0.0   WIICLASSICCONTROLLER                                              12/12/2017 17:09:05 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE WIICLASSICCONTROLLER
OBJECT MODULE PLACED IN .\WiiClassicController.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\libfnd\WiiClassicController.c BROWSE DEBUG OBJECTEXTEND PRINT(.\WiiClass
                    -icController.lst) OBJECT(.\WiiClassicController.obj)

line level    source

   1          #include <INTRINS.h>
   2          #include "WiiClassicController.h"
   3          #include "I2C.h"
   4          #include "Uart.h"
   5          
   6          
   7          #define WII_CLASSIC_CONTROLLER_ID       0x52
   8          
   9          
  10          typedef struct WiiControllerData{
  11                  u8 xLAnalog;
  12                  u8 yLAnalog;
  13                  
  14                  u8 xRAnalog;
  15                  u8 yRAnalog;
  16                  
  17                  u8 LTrigger;
  18                  u8 RTrigger;
  19                  
  20                  u16 buttons;
  21          }structWiiControllerData;
  22          
  23          
  24          static structWiiControllerData wiiControllerData;
  25          static u16 prevButtons = 0;
  26          
  27          
  28          static u8 Decrypt(u8 x){
  29   1              return x;
  30   1              //return (x ^ 0x17) + 0x17;
  31   1      }
  32          
  33          void WiiClassicController_Init(){
  34   1              s8 result;
  35   1              u8 buf[6];
  36   1              u8 i;
  37   1              
  38   1              Uart_String("Initializing Wii Classic Controller...\r\n");
  39   1              
  40   1              buf[0] = 0xF0;
  41   1              buf[1] = 0x55;
  42   1              result = I2C_Puts(WII_CLASSIC_CONTROLLER_ID, 0, 0, buf, 2);
  43   1              while(result != 0);
  44   1              
  45   1              Delay(1);
  46   1              
  47   1              buf[0] = 0xFB;
  48   1              buf[1] = 0x00;
  49   1              result = I2C_Puts(WII_CLASSIC_CONTROLLER_ID, 0, 0, buf, 2);
  50   1              while(result != 0);
  51   1              
  52   1              Delay(1);
  53   1              
  54   1              Uart_String("Reading ID...\r\n");
C51 COMPILER V9.52.0.0   WIICLASSICCONTROLLER                                              12/12/2017 17:09:05 PAGE 2   

  55   1              
  56   1              buf[0] = 0xFA;
  57   1              result = I2C_Puts(WII_CLASSIC_CONTROLLER_ID, 0, 0, buf, 1);
  58   1              while(result != 0);
  59   1              
  60   1              result = I2C_Gets(WII_CLASSIC_CONTROLLER_ID, 0, 0, buf, 6);
  61   1              while(result != 0);
  62   1              
  63   1              Uart_String("ID=");
  64   1              for(i=0;i<6;++i){
  65   2                      Uart_Hex(buf[i]);
  66   2                      Uart_String(" ");
  67   2              }
  68   1              Uart_String("\r\n\r\n");
  69   1              
  70   1              Delay(1);
  71   1              
  72   1              Uart_String("Wii Classic Controller Initialization Finished.\r\n");
  73   1      }
  74          
  75          static void WiiClassicController_GetData(){
  76   1              u8 buf[6];
  77   1              s8 result;
  78   1              u8 i;
  79   1              
  80   1              buf[0] = 0;
  81   1              result = I2C_Puts(WII_CLASSIC_CONTROLLER_ID, 0, 0, buf, 1);
  82   1              while(result != 0);
  83   1              
  84   1              Delay(0);
  85   1              
  86   1              result = I2C_Gets(WII_CLASSIC_CONTROLLER_ID, 0, 0, buf, 6);
  87   1              while(result != 0);
  88   1              
  89   1              for(i=0;i<6;++i)buf[i] = Decrypt(buf[i]);
  90   1              
  91   1              wiiControllerData.xLAnalog = (buf[0] & 0x3F);
  92   1              wiiControllerData.yLAnalog = (buf[1] & 0x3F);
  93   1              
  94   1              wiiControllerData.xRAnalog = ((buf[0] >> 6) & 0x03) << 3;
  95   1              wiiControllerData.xRAnalog |= ((buf[1] >> 6) & 0x03) << 1;
  96   1              wiiControllerData.xRAnalog |= ((buf[2] >> 7) & 0x01);
  97   1              
  98   1              wiiControllerData.yRAnalog = buf[2] & 0x1F;
  99   1              
 100   1              wiiControllerData.LTrigger = ((buf[2] >> 5) & 0x03) << 3;
 101   1              wiiControllerData.LTrigger |= (buf[3] >> 5) & 0x07;
 102   1              
 103   1              wiiControllerData.RTrigger = buf[3] & 0x1F;
 104   1              
 105   1              wiiControllerData.buttons = buf[5];
 106   1              wiiControllerData.buttons <<= 8;
 107   1              wiiControllerData.buttons |= buf[4];
 108   1              wiiControllerData.buttons = ~wiiControllerData.buttons;
 109   1      }
 110          
 111          void WiiClassicController_Read(){
 112   1              prevButtons = wiiControllerData.buttons;
 113   1              WiiClassicController_GetData();
 114   1      }
 115          
 116          bit WiiClassicController_IsKeyDown(u16 key){
C51 COMPILER V9.52.0.0   WIICLASSICCONTROLLER                                              12/12/2017 17:09:05 PAGE 3   

 117   1              return (~prevButtons & wiiControllerData.buttons & key);
 118   1      }
 119          
 120          bit WiiClassicController_IsKeyHold(u16 key){
 121   1              return (wiiControllerData.buttons & key);
 122   1      }
 123          
 124          bit WiiClassicController_IsKeyUp(u16 key){
 125   1              return (prevButtons & ~wiiControllerData.buttons & key);
 126   1      }
 127          
 128          s8 WiiClassicController_GetLAnalogX(){
 129   1              return wiiControllerData.xLAnalog - 32;
 130   1      }
 131          
 132          s8 WiiClassicController_GetLAnalogY(){
 133   1              return wiiControllerData.yLAnalog - 32;
 134   1      }
 135          
 136          s8 WiiClassicController_GetRAnalogX(){
 137   1              return (wiiControllerData.xRAnalog << 1) - 32;
 138   1      }
 139          
 140          s8 WiiClassicController_GetRAnalogY(){
 141   1              return (wiiControllerData.yRAnalog << 1) - 32;
 142   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    497    ----
   CONSTANT SIZE    =    118    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
