C51 COMPILER V9.52.0.0   UART                                                              12/12/2017 17:09:05 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Uart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\libfnd\Uart.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Uart.lst) OBJECT(.\Uart.
                    -obj)

line level    source

   1          #include <STRING.H>
   2          #include "Uart.h"
   3          
   4          
   5          void Uart_Init(){
   6   1              PCON &= 0x7F;   // 波特率不倍速
   7   1              SCON = 0x50;    // 8位数据，可变波特率
   8   1              AUXR |= 0x40;   // 定时器1时钟为Fosc，即1T
   9   1              AUXR &= 0xFE;   // 串口1选择定时器1为波特率发生器
  10   1              TMOD &= 0x0F;   // 清除定时器1模式位
  11   1              TMOD |= 0x20;   // 设定定时器1为8位自动重装方式
  12   1              TL1 = 0xFD;             // 设定定时初值（波特率115200）
  13   1              TH1 = 0xFD;             // 设定定时器重装值
  14   1              ET1 = 0;                // 禁止定时器1中断
  15   1              TR1 = 1;                // 启动定时器1
  16   1              TI = 1;                 // 这个位是由硬件自动置位的，代表串行中断请求。不明白为什么在这里手动置位……
  17   1      }
  18          
  19          void Uart_Put(u8 value){
  20   1              SBUF = value;   // 向串口送出数据
  21   1              while(TI == 0); // 等待串行中断请求
  22   1              TI = 0;                 // 手动清除串行中断请求
  23   1      }
  24          
  25          bit Uart_Get(u8* value){
  26   1              if(RI == 1){            // 如果检测到串行中断请求
  27   2                      *value = SBUF;  // 从串口接收数据
  28   2                      RI = 0;                 // 手动清除串行中断请求
  29   2                      return 1;
  30   2              }
  31   1              return 0;
  32   1      }
  33          
  34          //void Uart_Log(const char* fmt, ...){
  35          //      va_list args;
  36          //      va_start(args, fmt);
  37          //      TI = 1;
  38          //      vprintf(fmt, args);
  39          //      va_end(args);
  40          //}
  41          
  42          void Uart_String(const char* str){
  43   1              u8 i = 0, len = strlen(str);
  44   1              for(;i<len;++i)Uart_Put(str[i]);
  45   1      }
  46          
  47          void Uart_Dec(u8 val){
  48   1              u8 i = 0;
  49   1              u8 strBuf[4];
  50   1              u8 len = Dec2String(val, strBuf);
  51   1              for(;i<len;++i){
  52   2                      Uart_Put(strBuf[i]);
  53   2              }
  54   1      }
C51 COMPILER V9.52.0.0   UART                                                              12/12/2017 17:09:05 PAGE 2   

  55          
  56          void Uart_Hex(u8 val){
  57   1              u8 i = 0;
  58   1              u8 strBuf[3];
  59   1              u8 len = Hex2String(val, strBuf);
  60   1              for(;i<len;++i){
  61   2                      Uart_Put(strBuf[i]);
  62   2              }
  63   1      }
  64          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    165    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
